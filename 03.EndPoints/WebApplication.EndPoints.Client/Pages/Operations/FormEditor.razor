<EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <input type="hidden" @bind-value="Model.ParentId" />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">

                <div class="form-check form-check-flat">
                    <label class="form-check-label">
                        <InputCheckbox class="form-check-input" @bind-Value="Model.IsActive"></InputCheckbox>@Resources.DataDictionary.IsActive<i class="input-helper"></i>
                    </label>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group row">
                <label class="col-sm-3 col-form-label" for="@nameof(Model.Name)">@Resources.Models.Operation.Name</label>
                <div class="col-sm-9">
                    <InputText id="@nameof(Model.Name)" class="form-control" @bind-Value="Model.Name"></InputText>
                    <div class="error mt-2 text-danger">
                        <ValidationMessage For="() => Model.Name" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group row">
                <label class="col-sm-3 col-form-label" for="@nameof(Model.DisplayName)">@Resources.DataDictionary.DisplayName</label>
                <div class="col-sm-9">
                    <InputText id="@nameof(Model.DisplayName)" class="form-control" @bind-Value="Model.DisplayName"></InputText>
                    <div class="error mt-2 text-danger">
                        <ValidationMessage For="() => Model.DisplayName" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group row">
                <label class="col-sm-3 col-form-label" for="@nameof(Model.AccessType)">@Resources.Models.Operation.AccessType</label>
                <div class="col-sm-9">
                    <InputSelectEnum id="@nameof(Model.AccessType)" class="form-control" @bind-Value="Model.AccessType"></InputSelectEnum>
                    <div class="error mt-2 text-danger">
                        <ValidationMessage For="() => Model.AccessType" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group row">
                <label class="col-sm-3 col-form-label" for="@nameof(Model.ParentId)">@Resources.Models.Operation.Parent</label>
                <div class="col-sm-9">
                    <InputSelect id="@nameof(Model.ParentId)" class="form-control" @bind-Value="Model.ParentId">
                        <option></option>
                        @foreach (var item in parents)
                        {
                            <option value="@item.Id">@item.DisplayName</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group row">
                <label class="col-sm-3 col-form-label" for="@nameof(Model.Description)">@Resources.DataDictionary.Description</label>
                <div class="col-sm-9">
                    <InputTextArea id="@nameof(Model.Description)" class="form-control" rows="6" @bind-Value="Model.Description"></InputTextArea>
                </div>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-success mr-2">@Resources.Buttons.Submit</button>
    <a class="btn btn-light" href="/Operations">@Resources.Buttons.Cancel</a>

</EditForm>

@code
{
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public ViewModels.Operation.CreateViewModel Model { get; set; }

    private IEnumerable<ViewModels.Operation.OperationDataViewModel> parents;

    protected override async Task OnInitializedAsync()
    {
        parents = new List<ViewModels.Operation.OperationDataViewModel>();

        parents =
            await client.GetFromJsonAsync<ViewModels.Operation.OperationDataViewModel[]>
            ("/Operations/GetParents");
    }

    private void HandleValidSubmit()
    {
        OnValidSubmit.InvokeAsync(null);
    }

}